#!/usr/bin/env python3


import rospy
import math

import actionlib
from std_msgs.msg import String
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from actionlib_msgs.msg import GoalStatus
from geometry_msgs.msg import Pose, Point, Quaternion, PoseArray
from tf.transformations import quaternion_from_euler
from nav_msgs.msg import Path
import time
import math


class moveBaseClient():

    def __init__(self):

        self.status = "INIT"
        # self.goals_arr_sub = rospy.Subscriber("/move_base_client/goals_arr", PoseArray, self.callback_new_goals)

        self.status_pub = rospy.Publisher('move_base_client/state', String, queue_size=10)
        self.poses_list = []
        self.current_goal = 0
        self.client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
        rospy.loginfo("Waiting for action server...")
        wait = self.client.wait_for_server(rospy.Duration(10.0))
        if not wait:
            rospy.logerr("Action server not available!")
            return
        rospy.loginfo("Connected to move base server")
        rospy.loginfo("Waiting for new task ...")
        self.status = "READY"
        self.goals_arr_sub = rospy.Subscriber("/waypoint_list", Path, self.callback_new_goals)
        self.navi_goals_arr_sub = rospy.Subscriber("/move_base_client/goals_arr", Path, self.callback_new_navi_goals)


    def callback_new_goals(self, msg):
        print("hhhh")
        if self.status == "READY":
            self.current_goal = 0
            self.poses_list = msg.poses
            # self.movebase_client()
            client.status = "PATH"

    def callback_new_navi_goals(self, msg):
        print("dddddddd")
        if self.status == "READY":
            self.current_goal = 0
            self.poses_list = msg.poses
            # self.movebase_client()
            client.status = "PATH"


    def send_next_goal(self):
        if self.current_goal < len(self.poses_list):
            print("Next goal")
            next_goal = MoveBaseGoal()
            next_goal.target_pose.header.frame_id = "map"
            next_goal.target_pose.header.stamp = rospy.Time.now()
            previous_pose = self.poses_list[self.current_goal-1].pose
            current_pose = self.poses_list[self.current_goal].pose
            # print("previous_pose")
            # print(previous_pose)
            # print("current_pose")
            # print(current_pose)
            distance = math.sqrt(((previous_pose.position.x - current_pose.position.x)**2) + ((previous_pose.position.y - current_pose.position.y)**2))
            # print("distance")
            # print(distance)
            # print("distance")
            next_goal.target_pose.pose = self.poses_list[self.current_goal].pose
            rospy.loginfo("Sending goal pose " + str(self.current_goal + 1) + " to Action Server")
            rospy.loginfo(str(self.poses_list[self.current_goal]))
            try:
                time.sleep(1)
                # self.client.stop_tracking_goal()
                self.client.send_goal(next_goal, self.done_cb, self.active_cb, self.feedback_cb)
                self.client.wait_for_result()
                print(self.client.get_result())
                print("RESULT")
            except Exception as e:
                print(e)
                print("PRASEEEEEEEEEEEEEEEEEEEEEEEEE")
        else:
            rospy.loginfo("Last goal reached!")
            self.status == "READY"

    def active_cb(self):
        rospy.loginfo("Goal pose "+str(self.current_goal+1)+" is now being processed by the Action Server...")

    def feedback_cb(self, feedback):
        #To print current pose at each feedback:
        #rospy.loginfo("Feedback for goal "+str(self.goal_cnt)+": "+str(feedback))
        # rospy.loginfo("Feedback for goal pose "+str(self.current_goal+1)+" received")
        # print(feedback)
        current_pose = self.poses_list[self.current_goal].pose
        distance = math.sqrt(((feedback.base_position.pose.position.x - current_pose.position.x) ** 2) + (
                (feedback.base_position.pose.position.y - current_pose.position.y) ** 2))
        rospy.loginfo("Feedback for goal pose {} received. Distance: {}".format(self.current_goal+1, distance))


    def done_cb(self, status, result):
        rospy.loginfo("Goal status: {}".format(status))

        self.current_goal += 1
    # Reference for terminal status values: http://docs.ros.org/diamondback/api/actionlib_msgs/html/msg/GoalStatus.html
        if status == 2:
            rospy.loginfo("Goal pose "+str(self.current_goal)+" received a cancel request after it started executing, completed execution!")

        if status == 3:
            rospy.loginfo("Goal pose "+str(self.current_goal)+" reached")
            # self.send_next_goal()
            self.status = "DONE"

        if status == 4:
            rospy.loginfo("Goal pose "+str(self.current_goal)+" was aborted by the Action Server")
            # self.send_next_goal()
            self.status = "DONE"

        if status == 5:
            rospy.loginfo("Goal pose "+str(self.current_goal)+" has been rejected by the Action Server")
            # self.send_next_goal()
            self.status = "DONE"

        if status == 8:
            rospy.loginfo("Goal pose "+str(self.current_goal)+" received a cancel request before it started executing, successfully cancelled!")



    def movebase_client(self):
        if len(self.poses_list) > 0:
            goal = MoveBaseGoal()
            goal.target_pose.header.frame_id = "map"
            goal.target_pose.header.stamp = rospy.Time.now()
            goal.target_pose.pose = self.poses_list[self.current_goal].pose
            rospy.loginfo("Sending goal pose "+str(self.current_goal+1)+" to Action Server")
            rospy.loginfo(str(self.poses_list[self.current_goal]))
            self.status == "RUNNING"
            self.client.send_goal(goal, self.done_cb, self.active_cb, self.feedback_cb)
            self.client.wait_for_result()
            print(self.client.get_result())
            print("RESULT")
            # self.send_next_goal()
            self.status = "DONE"

        else:
            rospy.loginfo("Empty array was sent. No goals to reach.")



if __name__ == '__main__':
    try:
        rospy.init_node('move_base_client')
        client = moveBaseClient()
        rate = rospy.Rate(3)  # 1hz
        client.status = "READY"
        while not rospy.is_shutdown():
            client.status_pub.publish(client.status)
            print(client.status)

            if (client.status == "PATH") or (client.status == "DONE"):
                client.movebase_client()


            if client.client.gh != None:
                print(client.client.gh.get_goal_status())

            # No more poses to go
            if (client.current_goal == len(client.poses_list)) and (client.status != "READY"):
                rospy.loginfo("Last goal reached!")
                client.status = "READY"

            rate.sleep()

    except rospy.ROSInterruptException:
        rospy.loginfo("Navigation interrupted!")